namespace Perf.Holders.Generator.Builders;

using Internal;
using Types;

sealed class OptionMessagePackSourceBuilder(
    OptionHolderContextInfo context,
    CompInfo compInfo
) {
    const string Exceptions = "global::Perf.Holders.Exceptions.OptionHolderExceptions";
    readonly InterpolatedStringBuilder sb = new(stringBuilder: new());

    int bracesToCloseOnEnd;

    void Preparation() {
        if (compInfo.SupportNullableAnnotation() is false && context.Some.IsStruct is false) {
            context = context with {
                Some = context.Some with {
                    TypeNullable = context.Some.Type
                }
            };
        }
    }

    public string WriteAllAndBuild() {
        Preparation();
        DeclareTopLevelStatements();
        WriteMessagePackFormatter();
        // WriteEndOfType();
        WriteEndOfFile();
        return sb.ToString();
    }

    void DeclareTopLevelStatements() {
        sb.AppendLine("// <auto-generated />");
        if (compInfo.SupportNullableAnnotation()) {
            sb.AppendLine("#nullable enable");
        }

        if (compInfo.SupportFileScopedNamespace()) {
            sb.AppendLine("namespace Perf.Holders.Serialization.MessagePack;");
        } else {
            sb.AppendLine("namespace Perf.Holders.Serialization.MessagePack\n{");
            bracesToCloseOnEnd++;
        }
    }

    void WriteMessagePackFormatter() {
        var accessibility = context.Option.Accessibility is TypeAccessibility.Public ? "public " : "";
        const string msgPack = "global::MessagePack";
        sb.AppendInterpolatedLine(
            $$"""
            {{accessibility}}sealed class MessagePackFormatter_{{context.Option.OnlyName}} : {{msgPack}}.Formatters.IMessagePackFormatter<{{context.Option.GlobalName}}> {
                public static readonly MessagePackFormatter_{{context.Option.OnlyName}} Instance = new();
                
                public void Serialize(ref {{msgPack}}.MessagePackWriter writer, {{context.Option.GlobalName}} value, {{msgPack}}.MessagePackSerializerOptions options) {
                    if(value.{{context.IsSome.Property}}) {
                        {{msgPack}}.MessagePackSerializer.Serialize(ref writer, value.{{context.Some.Property}}, options);
                    } else {
                        writer.WriteNil();
                    }
                }
                
                public {{context.Option.GlobalName}} Deserialize(ref {{msgPack}}.MessagePackReader reader, {{msgPack}}.MessagePackSerializerOptions options) {
                    if (reader.TryReadNil()) {
                        return default;
                    }
                    var value = {{msgPack}}.MessagePackSerializer.Deserialize<{{context.Some.Type}}>(ref reader, options);
                    return value;
                }
            }
            """
        );
    }

    void WriteEndOfFile() {
        for (var i = 0; i < bracesToCloseOnEnd; i++) {
            sb.Indent--;
            sb.Append('}');
        }

        sb.AppendLine();
    }
}
