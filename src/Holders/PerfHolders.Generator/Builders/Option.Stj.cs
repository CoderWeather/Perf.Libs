namespace Perf.Holders.Generator.Builders;

using System.Buffers;
using Internal;
using Types;

sealed class OptionSystemTextJsonSourceBuilder(OptionHolderContextInfo contextInfo) {
    readonly InterpolatedStringBuilder sb = new(stringBuilder: new(8000));

    readonly CompInfo compInfo = contextInfo.CompInfo;
    int bracesToCloseOnEnd;
    OptionHolderContextInfo context = contextInfo;

    void Preparation() {
        if (compInfo.SupportNullableAnnotation() is false && context.Some.IsStruct is false) {
            context = context with {
                Some = context.Some with {
                    TypeNullable = context.Some.Type
                }
            };
        }
    }

    public string WriteAllAndBuild() {
        Preparation();
        DeclareTopLevelStatements();
        if (context.Some.IsTypeParameter) {
            WriteJsonConverterFactory();
        }

        WriteJsonConverter();
        WriteEndOfFile();
        return sb.ToString();
    }

    void DeclareTopLevelStatements() {
        sb.AppendLine("// <auto-generated />");
        if (compInfo.SupportNullableAnnotation()) {
            sb.AppendLine("#nullable enable");
        }

        if (compInfo.SupportFileScopedNamespace()) {
            sb.AppendLine("namespace Perf.Holders.Serialization.SystemTextJson;");
        } else {
            sb.AppendLine("namespace Perf.Holders.Serialization.SystemTextJson\n{");
            bracesToCloseOnEnd++;
        }
    }

    void WriteJsonConverterFactory() {
        var accessibility = context.GlobalAccessibility is TypeAccessibility.Public ? "public " : "";
        const string stj = "global::System.Text.Json";
        const string stjSer = "global::System.Text.Json.Serialization";

        var globalNameString = context.Option.GlobalName;
        var globalNameBuffer = ArrayPool<char>.Shared.Rent(globalNameString.Length);
        var globalName = globalNameBuffer.AsSpan(0, globalNameString.Length);
        globalNameString.AsSpan().CopyTo(globalName);
        var indexStart = globalName.LastIndexOf('<');
        globalName[indexStart + 1] = '>';
        globalName = globalName[..(indexStart + 2)];

        sb.AppendInterpolatedLine(
            $$"""
            {{accessibility}}sealed class JsonConverterFactory_{{context.Option.OnlyName}} : {{stjSer}}.JsonConverterFactory
            {
                public static readonly JsonConverterFactory_{{context.Option.OnlyName}} Instance = new();

                public override bool CanConvert(Type typeToConvert) =>
                    cache.ContainsKey(typeToConvert) || (typeToConvert.IsConstructedGenericType && typeToConvert.GetGenericTypeDefinition() == typeof({{globalName}}));

                private readonly global::System.Collections.Concurrent.ConcurrentDictionary<Type, {{stjSer}}.JsonConverter> cache = new();

                public override {{stjSer}}.JsonConverter CreateConverter(Type typeToConvert, {{stj}}.JsonSerializerOptions options) =>
                    cache.GetOrAdd(
                        typeToConvert,
                        static t => {
                            var t1 = t.GetGenericArguments()[0];
                            return ({{stjSer}}.JsonConverter)global::System.Activator.CreateInstance(typeof(JsonConverter_{{context.Option.OnlyName}}<>).MakeGenericType(t1))!;
                        }
                    );
            }
            """
            );
    }

    void WriteJsonConverter() {
        var accessibility = context.GlobalAccessibility is TypeAccessibility.Public ? "public " : "";
        const string stj = "global::System.Text.Json";
        const string stjSer = "global::System.Text.Json.Serialization";
        var typeParameterConstraint = context.Some.IsTypeParameter ? $"    where {context.Some.Type} : notnull " : "";
        sb.AppendInterpolatedLine(
            $$"""
            {{accessibility}}sealed class JsonConverter_{{context.Option.DeclarationName}} : {{stjSer}}.JsonConverter<{{context.Option.GlobalName}}>
            {{typeParameterConstraint}}{
                public static readonly JsonConverter_{{context.Option.DeclarationName}} Instance = new();
                
                public override void Write({{stj}}.Utf8JsonWriter writer, {{context.Option.GlobalName}} value, {{stj}}.JsonSerializerOptions options)
                {
                    if(value.{{context.IsSome.Property}}) {
                        {{stj}}.JsonSerializer.Serialize(writer, value.{{context.Some.Property}}, options);
                    } else {
                        writer.WriteNullValue();
                    }
                }
                
                public override {{context.Option.GlobalName}} Read(ref {{stj}}.Utf8JsonReader reader, Type typeToConvert, {{stj}}.JsonSerializerOptions options)
                {
                    if (reader.TokenType == {{stj}}.JsonTokenType.Null) {
                        reader.Read();
                        return default;
                    }
                    
                    var value = {{stj}}.JsonSerializer.Deserialize<{{context.Some.Type}}>(ref reader, options)!;
                    return value;
                }
            }
            """
        );
    }

    void WriteEndOfFile() {
        for (var i = 0; i < bracesToCloseOnEnd; i++) {
            sb.Append('}');
        }

        sb.AppendLine();
    }
}
