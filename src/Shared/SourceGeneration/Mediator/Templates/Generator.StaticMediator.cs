namespace Perf.SourceGeneration.Mediator.Templates;

internal static partial class Generator {
	public static string GenerateStaticExecutionMethods(Assembly assembly, ImmutableArray<Handler> handlers) {
		using var writer = new IndentedTextWriter(new StringWriter(), "	");

		writer.WriteLines(
			"// <auto-generated />",
			"#pragma warning disable CS8019",
			"#pragma warning disable CS0105",
			"#nullable enable",
			null,
			$"namespace {assembly.Mediator.ContainingNamespace};",
			null,
			"using Microsoft.Extensions.DependencyInjection;",
			null
		);

		writer.WriteLine(
			$"{assembly.Mediator.Accessibility()} static class __{assembly.Mediator.Name}_StaticExecutionExtensions");
		using (NestedScope.Start(writer)) {
			writer.WriteLines(
				"public static void ProvideAccessToStaticMediatorExecution(this Microsoft.AspNetCore.Builder.WebApplication app) {",
				$"	Mediator = app.Services.GetService<{assembly.Mediator.GlobalName()}>()!;",
				"}",
				$"private static {assembly.Mediator.GlobalName()} Mediator = default!;"
			);

			foreach (var h in handlers) {
				foreach (var c in h.Common.Messages) {
					writer.WriteLine(
						$"public static ValueTask<{c.Output.GlobalName()}> Execute(this {c.Input.GlobalName()} message, CancellationToken ct) => Mediator.Send(message, ct);");
				}

				foreach (var n in h.Common.Notifications) {
					writer.WriteLine(
						$"public static ValueTask Publish(this {n.Input.GlobalName()} notification, CancellationToken ct) => Mediator.Publish(notification, ct);");
				}

				foreach (var m in h.Mirror.Messages) {
					writer.WriteLine(
						$"public static ValueTask{m.Output.GlobalName()} Execute(this {m.Input.GlobalName()} message, CancellationToken ct) => Mediator.Send(message, ct);");
				}
			}
		}

		return writer.InnerWriter.ToString()!;
	}
}
