namespace Perf.SourceGeneration.Mediator.Templates;

internal static partial class Generator {
    public static string GenerateStaticExecutionMethods(Assembly assembly, ImmutableArray<Handler> handlers) {
        using var writer = new IndentedTextWriter(new StringWriter(), "	");

        writer.WriteLines(
            "// <auto-generated />",
            "#pragma warning disable CS8019",
            "#pragma warning disable CS0105",
            "#nullable enable",
            null,
            $"namespace {assembly.Mediator.ContainingNamespace};",
            null,
            "using Microsoft.Extensions.DependencyInjection;",
            "using System.Runtime.CompilerServices;",
            null
        );

        writer.WriteLine(
            $"{assembly.Mediator.Accessibility()} static class Static{assembly.Mediator.Name}"
        );
        using (NestedScope.Start(writer)) {
            writer.WriteLines(
                $"public static void InitializeStatic{assembly.Mediator.Name}(this Microsoft.AspNetCore.Builder.WebApplication app) {{",
                $"	Mediator = app.Services.GetService<{assembly.Mediator.GlobalName()}>()!;",
                "}",
                $"private static {assembly.Mediator.GlobalName()} Mediator = default!;"
            );

            writer.WriteLine("#region Methods");
            const string inlineAttribute = "[MethodImpl(MethodImplOptions.AggressiveInlining)]";
            foreach (var h in handlers) {
                foreach (var c in h.Common.Messages) {
                    var emptyMessage = c.Input is INamedTypeSymbol nt && nt.HaveInstancePropertiesOrFields() is false;

                    if (emptyMessage is false) {
                        writer.WriteLines(
                            inlineAttribute,
                            $"public static ValueTask<{c.Output.GlobalName()}>",
                            $"	{c.Input.Name}({c.Input.GlobalName()} message, CancellationToken ct = default) => Mediator.Send(message, ct);"
                        );
                    } else {
                        writer.WriteLines(
                            inlineAttribute,
                            $"public static ValueTask<{c.Output.GlobalName()}>",
                            $"	{c.Input.Name}(CancellationToken ct = default) => Mediator.Send(new {c.Input.GlobalName()}(), ct);"
                        );
                    }

                    foreach (var cover in c.Input.Interfaces.Where(x => x.FullPath() is "Utilities.Mediator.Messages.ICoveredBy")) {
                        var by = cover.TypeArguments[0];
                        if (emptyMessage is false) {
                            writer.WriteLines(
                                inlineAttribute,
                                $"public static ValueTask<{c.Output.GlobalName()}>",
                                $"	{by.Name}({by.GlobalName()} message, CancellationToken ct = default) => Mediator.Send(message, ct);"
                            );
                        } else {
                            writer.WriteLines(
                                inlineAttribute,
                                $"public static ValueTask<{c.Output.GlobalName()}>",
                                $"	{by.Name}(CancellationToken ct = default) => Mediator.Send(new {by.GlobalName()}(), ct);"
                            );
                        }
                    }
                }

                foreach (var n in h.Common.Notifications) {
                    writer.WriteLines(
                        inlineAttribute,
                        $"public static ValueTask {n.Input.Name}({n.Input.GlobalName()} notification, CancellationToken ct) => Mediator.Publish(notification, ct);"
                    );
                }

                foreach (var m in h.Mirror.Messages) {
                    var emptyMessage = m.Input is INamedTypeSymbol nt && nt.HaveInstancePropertiesOrFields() is false;

                    if (emptyMessage is false) {
                        writer.WriteLines(
                            inlineAttribute,
                            $"public static ValueTask<{m.Output.GlobalName()}>",
                            $"	{m.Input.Name}({m.Input.GlobalName()} message, CancellationToken ct) => Mediator.Send(message, ct);"
                        );
                    } else {
                        writer.WriteLines(
                            inlineAttribute,
                            $"public static ValueTask<{m.Output.GlobalName()}>",
                            $"	{m.Input.Name}(CancellationToken ct) => Mediator.Send(new {m.Input.GlobalName()}(), ct);"
                        );
                    }

                    foreach (var cover in m.Input.Interfaces.Where(x => x.FullPath() is "Utilities.Mediator.Messages.ICoveredBy")) {
                        var by = cover.TypeArguments[0];
                        if (emptyMessage is false) {
                            writer.WriteLines(
                                inlineAttribute,
                                $"public static ValueTask<{m.Output.GlobalName()}>",
                                $"	{by.Name}({by.GlobalName()} message, CancellationToken ct = default) => Mediator.Send(message, ct);"
                            );
                        } else {
                            writer.WriteLines(
                                inlineAttribute,
                                $"public static ValueTask<{m.Output.GlobalName()}>",
                                $"	{by.Name}(CancellationToken ct = default) => Mediator.Send(new {by.GlobalName()}(), ct);"
                            );
                        }
                    }
                }
            }

            writer.WriteLine("#endregion Methods");
        }

        return writer.InnerWriter.ToString()!;
    }
}
